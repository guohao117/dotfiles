" Plugins {{{1 "
if has('nvim')
    let plugdata = stdpath('data') . '/plugged'
else
    let plugdata = '~/.vim' . '/plugged'
endif
call plug#begin(plugdata)
" retired plugin
" Plug 'majutsushi/tagbar'
" Plug 'bling/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
" Plug 'octol/vim-cpp-enhanced-highlight', { 'for': 'cpp'}
" Plug 'norcalli/snippets.nvim'
" Plug 'nvim-lua/completion-nvim'
" Plug 'steelsojka/completion-buffers'

" 3rd utilities
Plug 'tpope/vim-fugitive'
Plug 'guohao117/vim-ripgrep'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" editing plugins
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'easymotion/vim-easymotion'
Plug 'Raimondi/delimitMate'
Plug 'tomtom/tcomment_vim'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" langues
Plug 'keith/swift.vim'
Plug 'cespare/vim-toml'
Plug 'rust-lang/rust.vim'

" advanced plugins
Plug 'honza/vim-snippets'
" Plug 'rafamadriz/friendly-snippets'
if has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'L3MON4D3/LuaSnip'
    Plug 'saadparwaiz1/cmp_luasnip'
    Plug 'kyazdani42/nvim-web-devicons' " for file icons
    Plug 'ryanoasis/vim-devicons'
    Plug 'hoob3rt/lualine.nvim'
    Plug 'kyazdani42/nvim-tree.lua'"
    " Plug 'steelsojka/pears.nvim'
else
    Plug 'SirVer/ultisnips'
    Plug 'ncm2/ncm2'
    Plug 'roxma/vim-hug-neovim-rpc'
    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/float-preview.nvim'
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-path'
    Plug 'ncm2/ncm2-ultisnips'
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle'}
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle'}
    Plug 'itchyny/lightline.vim'
endif

" widgets
Plug 'liuchengxu/vista.vim'
Plug 'airblade/vim-gitgutter'

" colorschemes
Plug 'chriskempson/base16-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'w0ng/vim-hybrid'
Plug 'acarapetis/vim-colors-github'
Plug 'junegunn/seoul256.vim'
Plug 'sonph/onehalf', {'rtp': 'vim'}
Plug 'rakr/vim-one'
Plug 'guohao117/vim-dracula', { 'as': 'dracula' }
" Plug 'joshdick/onedark.vim'

call plug#end()
" 1}}} "

filetype plugin indent on
" ---------------
" Backups
" ---------------
set backup

" ---------------
" UI
" ---------------
set laststatus=2  " Always show the statusline
set cmdheight=2

" ---------------
" Text Format
" ---------------
set tabstop=4
set softtabstop=4
set shiftwidth=4  " Tabs under smart indent
set cindent
set autoindent
set smarttab
set expandtab
set backspace=2 " Delete everything with backspace
set foldlevel=4
set completeopt=noinsert,menuone,noselect

au FileType make setl noexpandtab
" augroup c
"   au!
"   au FileType c setl foldmethod=syntax
"   au FileType c setl textwidth=79
"   au FileType c setl foldlevel=999
" augroup END
"
" augroup cpp
"   au!
"   au FileType cpp setl textwidth=79
"   au FileType cpp setl foldlevel=999
" augroup END
"
" augroup python
"   au!
"   au FileType python setl foldmethod=indent
"   au FileType python setl foldlevel=999
" augroup END

augroup go
    au!
    setl noexpandtab
augroup end

if has('termguicolors')
    " && $COLORTERM ==? "truecolor"
set termguicolors
endif

function! SetStatusLine()
    if has('nvim')
        let g:lightline = {
                    \ 'colorscheme': 'dracula',
                    \ 'active': {
                    \   'left': [ [ 'mode', 'paste' ],
                    \             [ 'readonly', 'filename', 'modified', 'method' ] ]
                    \ },
                    \ 'component_function': {
                    \   'method': 'nvim_treesitter#statusline'
                    \ },
                    \ }
    else
    endif
endfunction


function! SetColorSchemeDeferred(timer)
    " if &bg ==? "dark"
    "     colorscheme onehalfdark
    " else
    "     colorscheme onehalflight
    " endif
    colorscheme dracula
    call UpdateLightline()
endfunction

augroup TUI_Enter
    au!
    autocmd VimEnter * ++nested call timer_start(50, 'SetColorSchemeDeferred', {'repeat': 1})
augroup END

function! UpdateLightline()
    " execute 'source' globpath(&rtp, printf('autoload/lightline/colorscheme/%s.vim', g:lightline['colorscheme']))
    " call lightline#colorscheme()
    " call lightline#update()
endfunction


augroup UI
    au!
    autocmd OptionSet background call UpdateLightline()
augroup END

if !empty($TMUX)
    set bg=dark
endif

if has('nvim')
lua << EOF
    require'lsp'.setup()
    local lang_list = {
        'clojure',
        'rust',
        'toml',
        'jsonc',
        'python',
        'bash',
        'java',
        'json',
        'lua',
        'c_sharp',
        'cpp',
        'go',
        'ruby',
    }
    require'nvim-treesitter.configs'.setup {
      ensure_installed = lang_list, -- one of "all", "maintained" (parsers with maintainers), or a list of languages
      highlight = {
        enable = true,              -- false will disable the whole extension
        disable = { },  -- list of language that will be disabled
      },
      indent = {
        enable = true,
      },
    }
    -- lualine
    require'lualine'.setup {
        options = {theme = 'dracula'},
        sections = {lualine_c = {'filename', 'nvim_treesitter#statusline'}},
        }
    require'nvim-tree'.setup()
      local cmp = require'cmp'

    -- nvim-cmp
    local cmp = require'cmp'
    local luasnip = require'luasnip'
    cmp.setup({
    snippet = {
        expand = function(args)
            luasnip.lsp_expand(args.body) -- For `luasnip` users.
        end,
    },
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'luasnip' }, -- For luasnip users.
    }, {
        { name = 'buffer' },
    }),
    mapping = {
        ['<CR>'] = cmp.mapping.confirm({ select = false }),
        },
    experimental = {
        native_menu = true,
        },
    })

    -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
    -- cmp.setup.cmdline('/', {
    --     sources = {
    --         { name = 'buffer' }
    --     }
    -- })

    -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
    -- cmp.setup.cmdline(':', {
    --     sources = cmp.config.sources({
    --         { name = 'path' }
    --     }, {
    --         { name = 'cmdline' }
    --     })
    -- })
    require'telescope'.setup {
        extensions = {
            fzf = {
                fuzzy = true,                    -- false will only do exact matching
                override_generic_sorter = true,  -- override the generic sorter
                override_file_sorter = true,     -- override the file sorter
                case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                -- the default case_mode is "smart_case"
            }
        }
    }
    require('telescope').load_extension('fzf')
EOF
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
endif

if !has('nvim')
    autocmd BufEnter * call ncm2#enable_for_buffer()
    " We don't really want UltiSnips to map these two, but there's no option for
    " that so just make it map them to a <Plug> key.
    let g:UltiSnipsExpandTrigger       = "<Plug>(ultisnips_expand_or_jump)"
    let g:UltiSnipsJumpForwardTrigger  = "<Plug>(ultisnips_expand_or_jump)"

    " Let UltiSnips bind the jump backward trigger as there's nothing special
    " about it.
    let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
    let g:UltiSnipsRemoveSelectModeMappings = 0
    let g:UltiSnipsEditSplit = 'context'
endif

" Try expanding snippet or jumping with UltiSnips/delimitMate and return <Tab> if nothing
" worked.
function! UniversalJumpForwardOrTab()
    if v:lua.require'luasnip'.expand_or_jump()
        return ""
    elseif delimitMate#ShouldJump()
        return delimitMate#JumpAny()
    else
        return "\<Tab>"
    endif
endfunction

function! MyExpandOr(...)
    if !pumvisible()
        call call('feedkeys', a:000)
        return ""
    endif
    if v:lua.require'luasnip'.expand_or_jump()
        return ""
    else
        call call('feedkeys', a:000)
        return ''
    endif
endfunction

" what i expected is <CR> only try to expand when popup menu is visible
" otherwise a newline is inserted.
" when popup menu show up, if no item selected, insert <CR>. otherwise insert
" selected item and expand it if possible. I don't want to insert <CR> if the
" slelected item can't be expanded, because <CR> just represent selection not
" a insertion.
if has('nvim')
    inoremap <silent> <Plug>(my_jump_forward) <C-r>=UniversalJumpForwardOrTab()<CR>
    inoremap <silent> <expr> <Tab> pumvisible() ? "\<C-n>" : MyExpandOr("\<Plug>(my_jump_forward)")
    inoremap <silent> <expr> <S-Tab> pmvisable() ? "\<C-p>" : "\<S-Tab>"
    inoremap <silent> <expr> <CR> pumvisible() ? MyExpandOr(empty(v:completed_item) ? "<CR>" : "", 'n') : "\<CR>"
    " inoremap <silent><expr> <C-e>     compe#close('<C-e>')
    " inoremap <silent><expr> <CR>      compe#confirm('<CR>')
else
    inoremap <silent> <expr> <Tab> pumvisible() ? "\<C-n>" : ncm2_ultisnips#expand_or("\<Plug>(ultisnips_try_jump_forwards)")
    " i_CTRL-R_= insert expr result
    inoremap <silent> <Plug>(ultisnips_try_jump_forwards) <C-r>=UniversalJumpForwardOrTab()<CR>
    inoremap <silent> <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <silent> <expr> <CR> pumvisible() ? ncm2_ultisnips#expand_or(empty(v:completed_item) ? "<CR>" : "", 'n') : "\<CR>"
    " Select mode mapping for jumping forward with <Tab>.
    snoremap <silent> <Tab> <Esc>:call UltiSnips#ExpandSnippetOrJump()<cr>
endif

let g:vista#renderer#enable_icon = 0

function! VistaLSPorCtags()
  if luaeval('not vim.tbl_isempty(vim.lsp.buf_get_clients(0))')
    echom 'lsp'
    execute 'Vista nvim_lsp'
  else
    echom 'ctags'
    execute 'Vista' 
  endif
endfunction

nnoremap <silent> <expr> <leader>m VistaLSPorCtags()
" nnoremap <silent> <C-p> <Esc>:Files<cr>
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

if has('win32')
    nnoremap <C-z> <Nop>
endif
set mouse=a

" gui
if has('nvim')
    autocmd UIEnter * set guifont=PragmataPro\ Liga
endif
